{"version":3,"sources":["components/Folder/AddButton/AddButton.tsx","components/Folder/AddFolderForm/AddFolderForm.tsx","components/Folder/Folder.tsx","components/FoldersTree/FoldersTree.tsx","components/App/initialData.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["AddButton","props","expanded","onClick","className","type","AddFolderForm","show","id","useState","inputValue","setInputValue","useEffect","placeholder","value","onChange","e","target","disabled","length","Folder","folder","onAdd","showInput","setShowInput","title","prevShowInput","folders","children","FoldersTree","map","key","App","foldersTree","setFoldersTree","newFolder","parseInt","uniqueId","insertNewFolder","prevTree","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b33f6bf1.chunk.js","sourcesContent":["import React from 'react';\n\nimport './index.css';\n\ninterface AddButtonComponentProps {\n  expanded: boolean;\n  onClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nfunction AddButton(props: AddButtonComponentProps) {\n  const { expanded, onClick } = props;\n\n  return (\n    <span className=\"add title__button\">\n      <button type=\"button\" className=\"add__button\" onClick={onClick}>\n        {expanded ? '\\u2296' : '\\u2295'}\n      </button>\n    </span>\n  );\n}\n\nexport default AddButton;\n","import React, { useState, useEffect } from 'react';\n\nimport './index.css';\n\ninterface AddFolderFormComponentProps {\n  id: number;\n  show: boolean;\n  onClick: (id: number, value: string) => void;\n}\n\nfunction AddFolderForm(props: AddFolderFormComponentProps) {\n  const { show, id, onClick } = props;\n\n  const [inputValue, setInputValue] = useState<string>('');\n\n  useEffect(() => {\n    setInputValue('');\n  }, [show]);\n\n  if (!show) {\n    return null;\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    onClick(id, inputValue);\n  };\n\n  return (\n    <div className=\"add-folder\">\n      <span className=\"add-folder__relation\">&#9492;</span>\n      <input\n        type=\"text\"\n        placeholder=\"type child name\"\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n      <button\n        type=\"button\"\n        disabled={inputValue.length === 0}\n        onClick={handleClick}\n      >\n        Save\n      </button>\n    </div>\n  );\n}\n\nexport default AddFolderForm;\n","import React, { useState } from 'react';\n\nimport FoldersTree from 'components/FoldersTree';\nimport { FolderProps } from 'interfaces';\n\nimport AddButton from './AddButton';\nimport AddFolderForm from './AddFolderForm';\n\nimport './index.css';\n\ninterface FolderComponentProps {\n  folder: FolderProps;\n  onAdd: (id: number, value: string) => void;\n}\n\nfunction Folder(props: FolderComponentProps) {\n  const { folder, onAdd } = props;\n\n  const [showInput, setShowInput] = useState<boolean>(false);\n\n  const handleAddClick = () => {\n    setShowInput((prevShowInput: boolean): boolean => {\n      return !prevShowInput;\n    });\n  };\n\n  const handleSaveClick = (id: number, value: string) => {\n    onAdd(id, value);\n    setShowInput(false);\n  };\n\n  return (\n    <div className=\"folder\">\n      <span className=\"title\">\n        {folder.title || (\n          <span className=\"title__placeholder\">(folder with no name)</span>\n        )}\n        <AddButton expanded={showInput} onClick={handleAddClick} />\n      </span>\n      <AddFolderForm\n        show={showInput}\n        id={folder.id}\n        onClick={handleSaveClick}\n      />\n      <FoldersTree folders={folder.children} onAdd={onAdd} />\n    </div>\n  );\n}\n\nexport default Folder;\n","import React from 'react';\n\nimport Folder from 'components/Folder';\nimport { FolderProps } from 'interfaces';\n\ninterface FoldersTreeComponentProps {\n  folders: Array<FolderProps> | undefined;\n  onAdd: (id: number, value: string) => void;\n}\n\nfunction FoldersTree(props: FoldersTreeComponentProps) {\n  const { folders, onAdd } = props;\n\n  return (\n    <div>\n      {folders?.map((folder: FolderProps) => (\n        <Folder folder={folder} key={folder.id} onAdd={onAdd} />\n      ))}\n    </div>\n  );\n}\n\nexport default FoldersTree;\n","import { FolderProps } from 'interfaces';\n\nconst folders: Array<FolderProps> = [\n  {\n    id: 1,\n    title: 'folder1',\n    children: [\n      {\n        id: 2,\n        title: 'folder1.1',\n        children: [],\n      },\n      {\n        id: 3,\n        title: 'folder1.2',\n        children: [],\n      },\n    ],\n  },\n  {\n    id: 4,\n    title: 'folder2',\n    children: [\n      {\n        id: 5,\n        title: 'folder2.1',\n        children: [\n          {\n            id: 6,\n            title: '',\n            children: [\n              {\n                id: 7,\n                title: 'folder2.1.1.1',\n                children: [],\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 8,\n        title: 'folder2.2',\n        children: [],\n      },\n    ],\n  },\n];\n\nexport default folders;\n","import uniqueId from 'lodash/uniqueId';\nimport React, { useState } from 'react';\n\nimport FoldersTree from 'components/FoldersTree';\nimport { FolderProps } from 'interfaces';\n\nimport folders from './initialData';\n\nfunction App() {\n  const [foldersTree, setFoldersTree] = useState<Array<FolderProps>>(folders);\n\n  const handleAdd = (id: number, value: string) => {\n    const newFolder: FolderProps = {\n      id: parseInt(uniqueId(), 10),\n      title: value,\n      children: [],\n    };\n\n    const insertNewFolder = (folder: FolderProps): FolderProps => {\n      if (folder.id === id) {\n        return {\n          ...folder,\n          children: [newFolder, ...folder.children],\n        };\n      }\n\n      return {\n        ...folder,\n        children: folder.children.map(insertNewFolder),\n      };\n    };\n\n    setFoldersTree(\n      (prevTree: Array<FolderProps>): Array<FolderProps> => {\n        return prevTree.map(insertNewFolder);\n      }\n    );\n  };\n\n  return <FoldersTree folders={foldersTree} onAdd={handleAdd} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}